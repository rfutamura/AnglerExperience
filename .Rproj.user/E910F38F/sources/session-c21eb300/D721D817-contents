---
title: "StudentCourse2024"
author: "Ryo FUTAMURA"
date: "2024-09-20"
output:
  html_document:
    code_folding: hide
    theme: united
    toc: yes
    toc_float: yes
always_allow_html: yes
---


```{r setup, warning=FALSE,message=FALSE}
setwd("C:/Users/rfuta/OneDrive/研究/Germany/Analysis/AnglingClass/git")

##read needed packages
pacman::p_load(tidyverse,ggdist,readr,lmerTest,ggplotgui,car,performance,glmmTMB,readxl,scales,vegan, rstatix, ggsci,viridis, RColorBrewer,effectsize,perfomance)
```

# data preaparation CPUE
```{r data preparation individual-level data to CPUE data, warning=FALSE,message=FALSE}
## Read the data set of individual level
AnglingClass_data <- read_xlsx("AnglingClass_finaldata.xlsx",sheet=1)%>%
   mutate(Date=as.Date(Date))%>%
   mutate(log_Length=log(Length),
          Hooking_depth=case_when(Hooking_depth=="Verydeep"~1,
                                                             Hooking_depth=="Deep"~1,
                                                             Hooking_depth=="Shallow"~0,
                                                        FALSE~NA))%>% 

                        mutate(Bleeding=case_when(Bleeding=="YES"~1,
                                                        Bleeding=="NO"~0,
                                                        FALSE~NA))
```

# Descriptive data Species
```{r species composition, warning=FALSE,message=FALSE}

Species_data<-AnglingClass_data%>%
            filter(Species!="NA")%>%
            filter(!Date %in%  ymd(c("2020-09-02", "2020-09-03"))) 
              # remove days when Hook type is not normalized.

################ statistical analysis #############################
#chi-square tests to test the annual difference in species composition
chisq.test(table(Species_data$Fishing_category,
                Species_data$Species))



################ figure #############################
Spp_summary<-Species_data %>%
  group_by(Fishing_category, Species) %>%
  summarise(counts = n())%>%
  arrange(desc(Species)) %>%
  mutate(prop = round(counts*100/sum(counts), 1),
         lab.ypos = cumsum(prop) - 0.5*prop)


custom_colors <- c("darkcyan", "azure2", "firebrick3", "midnightblue",
                   "lightskyblue4","rosybrown3",  "blueviolet", "black", "snow2")


## pie chart with a new color palette
Fig_1_SppComposition<-ggplot(Spp_summary, aes(x = "", y = prop, fill = Species)) +
  geom_bar(width = 1, stat = "identity") +
  coord_polar("y", start = 0) +
  facet_wrap(. ~ Fishing_category) +
  theme_void() +  
  theme(
    strip.text = element_text(size = 12, face = "bold"),  
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5), 
    legend.position = "right",  
    legend.title = element_text(size = 12, face = "bold"),  
    legend.text = element_text(size = 10)
    ) +
   scale_fill_manual(values = palette) 

Fig_1_SppComposition
ggsave("Fig1.pdf",plot=Fig_1_SppComposition,width=8,height=3)
```


#function for validating random factor
```{r}
# Function to compare models using LRT
evaluate_models <- function(reference_model, models_to_compare, data) {
  results <- list() # To store results
  
  for (i in seq_along(models_to_compare)) {
    # Fit the model dynamically
    model <- eval(parse(text = models_to_compare[[i]]))
    
    # Perform LRT with the reference model
    lrt <- anova(reference_model, model, test = "LRT")
    
    # Store the results
    results[[paste0("Model_", i)]] <- lrt
  }
  
  return(results)
}

```


# CPUE analysis 
```{r CPUE Analysis, warning=FALSE,message=FALSE}
## full data set of CPUE
Angling_CPUE_data <- read_xlsx("AnglingClass_finaldata.xlsx",sheet=2)%>%
                    mutate(Session_ID=as.numeric(Session_ID))%>%
                   filter(!Date %in%  ymd(c("2020-09-02", 
                                            "2020-09-03"))) #remove days with same hook

##Negative binomial distribution sub model
CPUE_model <- glmmTMB(N_fish~Fishing_experience_adjusted*Hook_size+
                             (1|Year)+(1|Angler_ID)+(1|Spot_ID)+(1|Session_ID)+(1|Date_ID),
                             family = nbinom2, 
                             data = Angling_CPUE_data)

#sumamary statistics
summary(CPUE_model)
#Anova(CPUE_model)


d_1<-Angling_CPUE_data %>% filter(Fishing_category=="Experienced") %>% pull(CPUE)
d_2<-Angling_CPUE_data %>% filter(Fishing_category =="Novice") %>% pull(CPUE)               
cohens_d(d_1,d_2)


################ figure #############################
# Create violin plot
Forplot_Angling_CPUE_data<-Angling_CPUE_data%>%
  filter(CPUE!="NA")

#figure 2 relationship between CPUE and angler experience  
Fig_2<-ggplot(Forplot_Angling_CPUE_data, 
              aes(x =  Fishing_category, y = CPUE, fill =  Fishing_category)) +
  # Violin plot (distribution of data)
  geom_violin(
    width = 0.8,       
    alpha = 0.3,       
    position = position_dodge(0.9),  
    trim = FALSE)+
  # Add boxplot (summary statistics)
  geom_boxplot(
    width = 0.1,       
    position = position_dodge(0.9), 
    outlier.shape = NA, 
    alpha = 0.4)+
  
  # Add jittered points (actual data points)
  geom_jitter(
    width = 0.05,       
    size = 1.5,        
    alpha = 0.3,       
    color = "black")+
  # Add mean points
  stat_summary(
    fun = "mean",      
    geom = "point",    
    shape = 23,        
    size = 3,          
    color = "black",   
    fill = "white",   
    position = position_dodge(0.9)) +
  
  # Axis labels
  labs(x = "Fishing Experience", 
       y = "CPUE in 30 minutes") +
  
  # Publication
  theme_bw(base_size = 12) +  
  # Customize axis text and titles
  theme(
    axis.title.y = element_text(margin = margin(r = 8)),
    axis.title.x = element_text(margin = margin(t = 8)),
    axis.title = element_text(face = "bold", size = 12),
    axis.text = element_text(size = 12),
    strip.text = element_text(size = 12, face = "bold"),  
    plot.title = element_text(hjust = 0.5, size = 12, face = "bold"), 
    legend.position = "none",
    panel.spacing = unit(1, "lines"),  
    plot.margin = margin(1, 1, 1, 1, "cm"))+
  # Manually set fill colors for violins
  scale_fill_manual(values = c("orange", "mediumorchid1")) +
  scale_color_manual(values = c("orange", "mediumorchid1")) +
  # Add cleaner gridlines
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())

ggsave("Fig2.pdf",plot=Fig_2,width=6,height=4)
```

# Descriptive data on fish size
```{r individual level analysis (Fish size), warning=FALSE,message=FALSE}

##data set for size analysis
AnglingClass_size_data <-AnglingClass_data%>%
                      filter(!Date %in%  
                               ymd(c("2020-09-02", "2020-09-03"))) #remove days with same hook size


##sub model for size analysis
Size_model<-lmer(Length~Fishing_experience_adjusted*Hook_size+
                             (1|Year)+(1|Angler_ID)+(1|Spot_ID)+(1|Session_ID)+(1|Date_ID),
                      data=AnglingClass_size_data)

## Summary statistics
summary(Size_model)
#Anova(Sub_size_model)

## Cohen"s D 
d1<-AnglingClass_size_data %>% filter(Fishing_category=="Experienced") %>% pull(log_Length)
d2<-AnglingClass_size_data %>% filter(Fishing_category =="Novice") %>% pull(log_Length)               
cohens_d(d1,d2)

######plotting########
## plot for fishing category
Fig_3<-ggplot(AnglingClass_size_data, aes(x =  Fishing_category, y = (Length),
                                          fill =  Fishing_category)) +
  # Violin plot
  geom_violin(
    width = 0.8,       
    alpha = 0.3,       
    position = position_dodge(0.9),  
    trim = FALSE       
  ) +
#Box plot 
  geom_boxplot(
    width = 0.1,       
    position = position_dodge(0.9),  
    outlier.shape = NA,  
    alpha = 0.4
  ) +
#Jittered points 
  geom_jitter(
    width = 0.05,      
    size = 1.5,        
    alpha = 0.2,       
    color = "black"  
  ) +
#Mean points
  stat_summary(
    fun = "mean",      
    geom = "point",    
    shape = 23,        
    size = 3,          
    color = "black",   
    fill = "white",   
    position = position_dodge(0.9)  
  ) +
#Axis labels
  labs(x = "Fishing Experience", 
       y = "Total length (mm)") +
# Publication
  theme_bw(base_size = 12) +  
# Axis text and titles
  theme(
    axis.title.y = element_text(margin = margin(r = 8)),
    axis.title.x = element_text(margin = margin(t = 8)),
    axis.title = element_text(face = "bold", size = 12),
    axis.text = element_text(size = 12),
    strip.text = element_text(size = 12, face = "bold"),  
    legend.position = "none",
    panel.spacing = unit(1, "lines"),  
    plot.margin = margin(1, 1, 1, 1, "cm")  
  )+
# Violins
  scale_fill_manual(values = c("orange", "mediumorchid1")) +
  scale_color_manual(values = c("orange", "mediumorchid1")) +
  
# Gridlines
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())

ggsave("Fig3.pdf",plot=Fig_3,width=6,height=4)
```

#Analysis and plot for Hypothesis 2 and 4
```{r individual level analysis (hook depth), warning=FALSE,message=FALSE}

## full data set for hoooking depth analysis 
AnglingClass_hooking_data <-AnglingClass_data%>%
                        filter(!is.na(Bleeding))%>%
                       filter(!Date %in%  ymd(c("2020-09-02", "2020-09-03")))
             
#### Statistical analysis ####
# Result model
Model_hooking <- glmer(data = AnglingClass_hooking_data,
                       Hooking_depth ~ Fishing_experience_adjusted * Hook_size +
                         (1|Year) + (1|Angler_ID) + (1|Spot_ID) + (1|Session_ID) + (1|Date_ID),
                       family = binomial(link = "logit"))

#summary statistics
summary(Model_hooking)
#Anova(Sub_model_hooking)
#odds_ratio
exp(fixef(Model_hooking))


# Models for random factor evaluation
model_list <- c(
  "glmer(data=AnglingClass_hooking_data, Hooking_depth~Fishing_experience_adjusted*Hook_size + (1|Angler_ID)+(1|Spot_ID)+(1|Session_ID)+(1|Date_ID), family = binomial(link = 'logit'))",
  "glmer(data=AnglingClass_hooking_data, Hooking_depth~Fishing_experience_adjusted*Hook_size + (1|Year)+(1|Spot_ID)+(1|Session_ID)+(1|Date_ID), family = binomial(link = 'logit'))",
  "glmer(data=AnglingClass_hooking_data, Hooking_depth~Fishing_experience_adjusted*Hook_size + (1|Year)+(1|Angler_ID)+(1|Session_ID)+(1|Date_ID), family = binomial(link = 'logit'))",
  "glmer(data=AnglingClass_hooking_data, Hooking_depth~Fishing_experience_adjusted*Hook_size + (1|Year)+(1|Angler_ID)+(1|Spot_ID)+(1|Date_ID), family = binomial(link = 'logit'))",
  "glmer(data=AnglingClass_hooking_data, Hooking_depth~Fishing_experience_adjusted*Hook_size + (1|Year)+(1|Angler_ID)+(1|Spot_ID)+(1|Session_ID), family = binomial(link = 'logit'))"
)


# Evaluate models systematically
evaluate_models(Model_hooking, model_list, AnglingClass_hooking_data)

########### figure ################
## Plotting Fishing experience difference of hooking depth
Count_data_hooking_depth <- AnglingClass_hooking_data%>%
  mutate(Treatment_Experience_Hooking =
           interaction(Fishing_category, as.factor(Hooking_depth)))%>%
  group_by(Fishing_category, Treatment_Experience_Hooking) %>%
  summarise(count = n(), .groups = 'drop') %>%
  group_by(Fishing_category) %>%
  mutate(percent = count / sum(count))  

## Calculate percentage for each treatment
Fig_4<-ggplot(Count_data_hooking_depth, aes(x = Fishing_category, 
                                      fill = as.factor(Treatment_Experience_Hooking))) +  
  geom_col(aes(y = percent), position = "fill", alpha = 0.7, color = "black") + 
    scale_fill_manual(values = c("Experienced.0" = "peachpuff", 
                                "Experienced.1" = "darkorange1", 
                                "Novice.0" = "plum1", 
                                "Novice.1" = "darkorchid"), 
                    labels = c("Experienced.0" = "No Bleeding", 
                               "Experienced.1" = "Bleeding", 
                               "Novice.0" = "No Bleeding", 
                               "Novice.1" = "Bleeding"),
                    limits = c("Experienced.0", "Experienced.1", 
                               "Novice.0", "Novice.1")) +
  scale_y_continuous(labels = scales::percent_format()) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme_classic(base_size = 12) +
  geom_text(aes(y = percent,  
                label = scales::percent(percent, accuracy = 1)), 
            position = position_fill(vjust = 0.5),  
            size = 3) + 
  xlab("Angling Experience") +
  ylab("Percent") +
  theme(
    axis.title.y = element_text(margin = margin(r = 12)),
    axis.title.x = element_text(margin = margin(t = 12)),
    axis.title = element_text(face = "bold", size = 12),
    axis.text = element_text(size = 12),
    strip.text = element_text(size = 12, face = "bold"),  
    legend.position = "right",
    panel.spacing = unit(1, "lines"),  
    plot.margin = margin(1, 1, 1, 1, "cm")  
    )+
  labs(fill = "")

ggsave("Fig4.pdf",plot=Fig_4,width=6,height=4)
```

```{r individual level analysis (Bleeding), warning=FALSE,message=FALSE}
## Read the data set of individual level analysis
AnglingClass_bleeding_data <-AnglingClass_data%>%
                        filter(!is.na(Bleeding))%>%
                        filter(!Date %in%  ymd(c("2020-09-02", "2020-09-03")))
   

#### Statistical analysis ####
Model_bleeding<-glmer(data=AnglingClass_bleeding_data,
                      Bleeding~Fishing_experience_adjusted*Hook_size+
                                (1|Year)+(1|Angler_ID)+(1|Spot_ID)+(1|Session_ID)+(1|Date_ID),
                                family = binomial(link = "logit"))

#summary statistics
summary(Model_bleeding)
#Anova(Model_bleeding)

#odds_ratio
exp(fixef(Model_bleeding))

##

# Models for random factor evaluation
model_list <- c(
  "glmer(data=AnglingClass_bleeding_data, Bleeding~Fishing_experience_adjusted*Hook_size + (1|Angler_ID)+(1|Spot_ID)+(1|Session_ID)+(1|Date_ID), family = binomial(link = 'logit'))",
  "glmer(data=AnglingClass_bleeding_data, Bleeding~Fishing_experience_adjusted*Hook_size + (1|Year)+(1|Spot_ID)+(1|Session_ID)+(1|Date_ID), family = binomial(link = 'logit'))",
  "glmer(data=AnglingClass_bleeding_data, Bleeding~Fishing_experience_adjusted*Hook_size + (1|Year)+(1|Angler_ID)+(1|Session_ID)+(1|Date_ID), family = binomial(link = 'logit'))",
  "glmer(data=AnglingClass_bleeding_data, Bleeding~Fishing_experience_adjusted*Hook_size + (1|Year)+(1|Angler_ID)+(1|Spot_ID)+(1|Date_ID), family = binomial(link = 'logit'))",
  "glmer(data=AnglingClass_bleeding_data, Bleeding~Fishing_experience_adjusted*Hook_size + (1|Year)+(1|Angler_ID)+(1|Spot_ID)+(1|Session_ID), family = binomial(link = 'logit'))"
)


# Evaluate models systematically
evaluate_models(Model_bleeding, model_list, AnglingClass_bleeding_data)



##################figure ##############################
# Calculate counts and percentages
count_data_Bleeding <- AnglingClass_bleeding_data%>%
  mutate(Treatment_Experience_Bleeding =
           interaction(Fishing_category, as.factor(Bleeding)))%>%
  group_by(Fishing_category,Treatment_Experience_Bleeding) %>%
  summarise(count = n(), .groups = 'drop') %>%
  group_by(Fishing_category) %>%
  mutate(percent = count / sum(count)) 


### Plot ####
Fig_5<-ggplot(count_data_Bleeding, aes(x = Fishing_category, 
                                      fill = Treatment_Experience_Bleeding)) +  
  geom_col(aes(y = percent), position = "fill", alpha = 0.7, color = "black") +  
  scale_fill_manual(values = c("Experienced.0" = "peachpuff", 
                                "Experienced.1" = "darkorange1", 
                                "Novice.0" = "plum1", 
                                "Novice.1" = "darkorchid"), 
                    labels = c("Experienced.0" = "No Bleeding", 
                               "Experienced.1" = "Bleeding", 
                               "Novice.0" = "No Bleeding", 
                               "Novice.1" = "Bleeding"),
                    limits = c("Experienced.0", "Experienced.1", 
                               "Novice.0", "Novice.1")) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme_classic(base_size = 14) +
#Add percentage labels inside the bars
  geom_text(aes(y = percent,
                label = scales::percent(percent, accuracy = 1)), 
            position = position_fill(vjust = 0.5),  
            size = 3) +
#Customize axis labels
  xlab("Angling Experience") +
  ylab("Percent") +
#Remove legend title
  labs(fill = "")+
  theme(
    legend.position = "right",
    axis.title.y = element_text(margin = margin(r = 10)),
    axis.title.x = element_text(margin = margin(t = 10)),
    axis.title = element_text(face = "bold", size = 10),
    axis.text = element_text(size = 10),
    strip.text = element_text(size = 10, face = "bold"), 
    panel.spacing = unit(1, "lines"),  
    plot.margin = margin(1, 1, 1, 1, "cm"))


ggsave("Fig5.pdf",plot=Fig_4,width=6,height=4)
```



```{r relationship between bleeding and depth}

#####statistical analysis on the relationship betwween two factors###
chisq.test(table(AnglingClass_data$Bleeding,
                         AnglingClass_data$Hooking_depth))

########### figure ################
# Contingency table for Bleeding and Hooking_depth
contingency_table <- table(AnglingClass_data$Bleeding, AnglingClass_data$Hooking_depth)

# Contingency table to a data frame for ggplot
contingency_df <- as.data.frame(contingency_table)
colnames(contingency_df) <- c("Bleeding", "Hooking_depth", "Count")

# Recode 0/1 as No/Yes for Bleeding and Hooking_depth
contingency_df$Bleeding <- factor(contingency_df$Bleeding, levels = c(0, 1), labels = c("No", "Yes"))
contingency_df$Hooking_depth <- factor(contingency_df$Hooking_depth, levels = c(0, 1), labels = c("Shallow", "Deep"))

# Calculate percentage within each Hooking_depth group
contingency_df <- contingency_df %>%
  group_by(Hooking_depth) %>%
  mutate(Percent = Count / sum(Count) * 100)  # Calculate percentage


# Plot the contingency table using ggplot with percentages
Fig_S1<-ggplot(contingency_df, aes(x = Hooking_depth, y = Percent, fill = Bleeding)) +
  # Stacked bar plot
  geom_bar(stat = "identity", position = "fill", color = "black", alpha = 0.7) +
  # Colors for "Bleeding"

scale_fill_manual(values = c("No" = "tan1", "Yes" = "firebrick4"),
                  labels = c("No" = "Not Bleeding", "Yes" = "Bleeding")) +
  # Labels
  labs(x = "Hooking Depth", y = "Percentage", fill = "Bleeding") +
  # y-axis as percent format
  scale_y_continuous(labels = scales::percent_format(scale = 100)) +
  # Percentage labels inside the bars
  geom_text(aes(label = paste0(round(Percent, 1), "%")), 
            position = position_fill(vjust = 0.5), 
            size = 3) +
  # Theme adjustments
  theme_classic(base_size = 12) +
  # Customize axis labels
  theme(
    axis.title = element_text(face = "bold", size = 12),
    axis.text = element_text(size = 12),
    legend.position = "right"
  )

ggsave("FigS1.pdf",plot=Fig_S1,width=6,height=4)

```


```{r plots for some testing....just notes}
#easy way to Visualize
#Viaualize angling skills 
# ggplot(data=AnglingClass_data, aes(x=Fishing_experience_standartized,fill=as.factor(Year)))+
#      geom_histogram()
# 
# ggplot(data=AnglingClass_data, aes(x=Fishing_experience_adjusted,fill=as.factor(Year)))+
#      geom_histogram()
# 
# ggplot(data=AnglingClass_data, aes(x=Fishing_experience_score,fill=as.factor(Year)))+
#      geom_histogram()
# 


#plots and several things
#easy one
# ggplot(AnglingClass_hooking_data, aes(x = Fishing_experience_adjusted,
#                                          color = as.factor(Hooking_depth),
#                                          fill = as.factor(Hooking_depth))) +
#   geom_bar(position = "fill")+
#   facet_wrap(.~Year)
# 
# 
# #easy one
# ggplot(AnglingClass_hooking_data, aes(x = Fishing_experience_adjusted,y=Hooking_depth,
#                                          color = as.factor(Year),
#                                          fill = as.factor(Year))) +
#   geom_point()+
#   geom_smooth(method = "glm", method.args = list(family = "binomial")) 
# sjPlot::plot_model(full_model_hooking_depth2, type = "pred",
#                    terms = c("Fishing_experience_adjusted", "Year"))
```

