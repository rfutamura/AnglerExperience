labels = c("0" = "Shallow", "1" = "Deep")) +
# Convert y-axis to percent format
scale_y_continuous(labels = scales::percent_format()) +
facet_wrap(. ~ Fishing_category, ncol = 1) +
# Classic theme for a cleaner look
theme_classic(base_size = 14) +
# Add percentage labels inside the bars
geom_text(aes(y = percent,  # Map y aesthetic to percent for text placement
label = scales::percent(percent, accuracy = 1)),
position = position_fill(vjust = 0.5),  # Position text inside the bars
size = 3) +  # Adjust text size
# Customize axis labels
xlab("Angling Experience") +
ylab("Percent") +
# Customize axis text and titles
theme(
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12, face = "bold"),  # Facet labels
legend.position = "none",
panel.spacing = unit(1, "lines"),  # Add spacing between facets
plot.margin = margin(1, 1, 1, 1, "cm")  # Increase margin around the plot
)+
# Remove legend title (empty string)
labs(fill = "")
###Plot for each year
ggplot(count_data_hooking_depth, aes(x = Session_ID,
fill = as.factor(Hooking_depth))) +  # Ensure Hooking_depth is a factor
geom_col(aes(y = percent), position = "fill", alpha = 0.7, color = "black") +  # Stacked bars
# Manual fill colors for "Hooking_depth"
scale_fill_manual(values = c("0" = "white", "1" = "grey30"),
labels = c("0" = "Shallow", "1" = "Deep")) +
# Convert y-axis to percent format
scale_y_continuous(labels = scales::percent_format()) +
facet_wrap(. ~ Fishing_category, ncol = 1) +
# Classic theme for a cleaner look
theme_classic(base_size = 14) +
# Add percentage labels inside the bars
geom_text(aes(y = percent,  # Map y aesthetic to percent for text placement
label = scales::percent(percent, accuracy = 1)),
position = position_fill(vjust = 0.5),  # Position text inside the bars
size = 3) +  # Adjust text size
# Customize axis labels
xlab("Angling Experience") +
ylab("Percent") +
# Customize axis text and titles
theme(
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12, face = "bold"),  # Facet labels
legend.position = "none",
panel.spacing = unit(1, "lines"),  # Add spacing between facets
plot.margin = margin(1, 1, 1, 1, "cm")  # Increase margin around the plot
)+
# Remove legend title (empty string)
labs(fill = "")
count_data_hooking_depth <- AnglingClass_hooking_data%>%
group_by(Hooking_depth, Session_ID,Fishing_category) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(Fishing_category, Session_ID) %>%
mutate(percent = count / sum(count))  # Calculate percentage for each treatment
###Plot for each year
ggplot(count_data_hooking_depth, aes(x = Session_ID,
fill = as.factor(Hooking_depth))) +  # Ensure Hooking_depth is a factor
geom_col(aes(y = percent), position = "fill", alpha = 0.7, color = "black") +  # Stacked bars
# Manual fill colors for "Hooking_depth"
scale_fill_manual(values = c("0" = "white", "1" = "grey30"),
labels = c("0" = "Shallow", "1" = "Deep")) +
# Convert y-axis to percent format
scale_y_continuous(labels = scales::percent_format()) +
facet_wrap(. ~ Fishing_category, ncol = 1) +
# Classic theme for a cleaner look
theme_classic(base_size = 14) +
# Add percentage labels inside the bars
geom_text(aes(y = percent,  # Map y aesthetic to percent for text placement
label = scales::percent(percent, accuracy = 1)),
position = position_fill(vjust = 0.5),  # Position text inside the bars
size = 3) +  # Adjust text size
# Customize axis labels
xlab("Angling Experience") +
ylab("Percent") +
# Customize axis text and titles
theme(
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12, face = "bold"),  # Facet labels
legend.position = "none",
panel.spacing = unit(1, "lines"),  # Add spacing between facets
plot.margin = margin(1, 1, 1, 1, "cm")  # Increase margin around the plot
)+
# Remove legend title (empty string)
labs(fill = "")
###Plot for each year
ggplot(count_data_hooking_depth_2, aes(x = Fishing_category,
fill = as.factor(Hooking_depth))) +  # Ensure Hooking_depth is a factor
geom_col(aes(y = percent), position = "fill", alpha = 0.7, color = "black") +  # Stacked bars
# Manual fill colors for "Hooking_depth"
scale_fill_manual(values = c("0" = "white", "1" = "grey30"),
labels = c("0" = "Shallow", "1" = "Deep")) +
# Convert y-axis to percent format
scale_y_continuous(labels = scales::percent_format()) +
# Classic theme for a cleaner look
theme_classic(base_size = 14) +
# Add percentage labels inside the bars
geom_text(aes(y = percent,  # Map y aesthetic to percent for text placement
label = scales::percent(percent, accuracy = 1)),
position = position_fill(vjust = 0.5),  # Position text inside the bars
size = 3) +  # Adjust text size
# Customize axis labels
xlab("Angling Experience") +
ylab("Percent") +
# Remove legend title (empty string)
labs(fill = "")+
# Customize axis text and titles
theme(
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.title = element_text(face = "bold", size = 12),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12, face = "bold"),  # Facet labels
panel.spacing = unit(1, "lines"),  # Add spacing between facets
plot.margin = margin(1, 1, 1, 1, "cm")  # Increase margin around the plot
)
summary(Sub_CPUE_model_nb)
Anova(Sub_CPUE_model_nb)
##boxplot recategorised
ggplot(Forplotting_Angling_CPUE_data, aes(x = Fishing_category, y = CPUE,fill=Fishing_category)) +
# Violin plot (distribution of data)
geom_violin(
color="grey90",
width = 0.8,       # Controls the width of the violins
alpha = 0.5,       # Transparency for the fill
position = position_dodge(0.9),  # To separate violins between groups (if needed)
trim = FALSE       # Do not trim the tails of the violins (shows full distribution)
) +
# Optionally, add boxplot (summary statistics)
geom_boxplot(
width = 0.1,       # Slim boxplot inside the violins
position = position_dodge(0.9),  # Ensure boxplots are aligned with violins
outlier.shape = NA,  # Hide outliers (because we'll show actual points)
alpha = 0.6
) +
# Add jittered points (actual data points)
geom_jitter(
width = 0.05,       # Add jitter horizontally to prevent overlap
size = 1.5,        # Adjust point size
alpha = 0.1,       # Transparency for better visibility
color = "black",   # Point color
) +
# Add mean points
stat_summary(
fun = "mean",      # Use the mean for each group
geom = "point",    # Plot points
shape = 23,        # Change shape of the point (filled point)
size = 3,          # Size of the point
color = "black",   # Point outline color
fill = "white",   # Point fill color
position = position_dodge(0.9)  # Align mean points with violins
) +
# Axis labels
labs(x = "Fishing Experience",
y = "CPUE in 30 min") +
# Customize theme for publication
theme_bw(base_size = 14) +  # Increase base font size for clarity
# Customize axis text and titles
theme(
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
strip.text = element_text(size = 14, face = "bold"),  # Facet labels
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Title centered
legend.position = "none",
panel.spacing = unit(1, "lines"),  # Add spacing between facets
plot.margin = margin(1, 1, 1, 1, "cm")  # Increase margin around the plot
) +
# Facet wrap for Year and Species
facet_wrap(. ~ Year) +
# Manually set fill colors for violins
scale_fill_manual(values = c("grey80", "grey80")) +
# Add cleaner gridlines
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(Angling_CPUE_data, aes(x = factor(Fishing_category), y = CPUE, fill = Fishing_category)) +
# Violin plot (distribution of data)
geom_violin(
color = "grey90",
width = 0.8,        # Controls the width of the violins
alpha = 0.5,        # Transparency for the fill
position = position_dodge(0.9),  # To separate violins between groups (if needed)
trim = FALSE        # Do not trim the tails of the violins (shows full distribution)
) +
# Optionally, add boxplot (summary statistics)
geom_boxplot(
width = 0.1,        # Slim boxplot inside the violins
position = position_dodge(0.9),  # Ensure boxplots are aligned with violins
outlier.shape = NA,  # Hide outliers (because we'll show actual points)
alpha = 0.6
) +
# Add jittered points (actual data points)
geom_jitter(
width = 0.05,       # Add jitter horizontally to prevent overlap
size = 1.5,         # Adjust point size
alpha = 0.1,        # Transparency for better visibility
color = "black"     # Point color
) +
# Add mean points
stat_summary(
fun = "mean",       # Use the mean for each group
geom = "point",     # Plot points
shape = 23,         # Change shape of the point (filled point)
size = 3,           # Size of the point
color = "black",    # Point outline color
fill = "white",     # Point fill color
position = position_dodge(0.9)  # Align mean points with violins
) +
# Axis labels
labs(x = "Fishing Experience",
y = "CPUE in 30 min") +
# Customize theme for publication
theme_bw(base_size = 14) +  # Increase base font size for clarity
# Customize axis text and titles
theme(
axis.title = element_text(face = "bold", size = 12),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12, face = "bold"),  # Facet labels
legend.position = "none",
panel.spacing = unit(3, "lines"),  # Add spacing between facets
plot.margin = margin(1, 1, 1, 1, "cm")  # Increase margin around the plot
) +
# Facet wrap for Year and Species
# facet_wrap(. ~ Year) +
# Manually set fill colors for violins
scale_fill_manual(values = c("grey80", "grey80")) +
# Add cleaner gridlines
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
```
## full data set of CPUE
Angling_CPUE_data <- read_xlsx("AnglingClass_fulldata.xlsx",sheet=2)%>%
mutate(Session_ID=as.numeric(Session_ID))%>%
filter(!Date %in%  ymd(c("2020-09-02",
"2020-09-03"))) #remove days with same hook
##Negative binomial distribution sub model
Sub_CPUE_model_nb <- glmmTMB(N_fish~
Fishing_experience_adjusted*Hook_size+
Fishing_experience_adjusted*Session_ID+
Date_ID*Fishing_experience_adjusted+
Hook_size*Date_ID+
Hook_size*Session_ID+
(1|Year)+(1|Angler_ID)+(1|Spot_ID),
family = nbinom2,
data = Angling_CPUE_data)
summary(Sub_CPUE_model_nb)
Anova(Sub_CPUE_model_nb)
# Create the violin plot
Forplotting_Angling_CPUE_data<-Angling_CPUE_data%>%
filter(CPUE!="NA")
##boxplot recategorised
ggplot(Forplotting_Angling_CPUE_data, aes(x = Fishing_category, y = CPUE,fill=Fishing_category)) +
# Violin plot (distribution of data)
geom_violin(
color="grey90",
width = 0.8,       # Controls the width of the violins
alpha = 0.5,       # Transparency for the fill
position = position_dodge(0.9),  # To separate violins between groups (if needed)
trim = FALSE       # Do not trim the tails of the violins (shows full distribution)
) +
# Optionally, add boxplot (summary statistics)
geom_boxplot(
width = 0.1,       # Slim boxplot inside the violins
position = position_dodge(0.9),  # Ensure boxplots are aligned with violins
outlier.shape = NA,  # Hide outliers (because we'll show actual points)
alpha = 0.6
) +
# Add jittered points (actual data points)
geom_jitter(
width = 0.05,       # Add jitter horizontally to prevent overlap
size = 1.5,        # Adjust point size
alpha = 0.1,       # Transparency for better visibility
color = "black",   # Point color
) +
# Add mean points
stat_summary(
fun = "mean",      # Use the mean for each group
geom = "point",    # Plot points
shape = 23,        # Change shape of the point (filled point)
size = 3,          # Size of the point
color = "black",   # Point outline color
fill = "white",   # Point fill color
position = position_dodge(0.9)  # Align mean points with violins
) +
# Axis labels
labs(x = "Fishing Experience",
y = "CPUE in 30 min") +
# Customize theme for publication
theme_bw(base_size = 14) +  # Increase base font size for clarity
# Customize axis text and titles
theme(
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
strip.text = element_text(size = 14, face = "bold"),  # Facet labels
plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),  # Title centered
legend.position = "none",
panel.spacing = unit(1, "lines"),  # Add spacing between facets
plot.margin = margin(1, 1, 1, 1, "cm")  # Increase margin around the plot
) +
# Facet wrap for Year and Species
facet_wrap(. ~ Year) +
# Manually set fill colors for violins
scale_fill_manual(values = c("grey80", "grey80")) +
# Add cleaner gridlines
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(Angling_CPUE_data, aes(x = factor(Fishing_category), y = CPUE, fill = Fishing_category)) +
# Violin plot (distribution of data)
geom_violin(
color = "grey90",
width = 0.8,        # Controls the width of the violins
alpha = 0.5,        # Transparency for the fill
position = position_dodge(0.9),  # To separate violins between groups (if needed)
trim = FALSE        # Do not trim the tails of the violins (shows full distribution)
) +
# Optionally, add boxplot (summary statistics)
geom_boxplot(
width = 0.1,        # Slim boxplot inside the violins
position = position_dodge(0.9),  # Ensure boxplots are aligned with violins
outlier.shape = NA,  # Hide outliers (because we'll show actual points)
alpha = 0.6
) +
# Add jittered points (actual data points)
geom_jitter(
width = 0.05,       # Add jitter horizontally to prevent overlap
size = 1.5,         # Adjust point size
alpha = 0.1,        # Transparency for better visibility
color = "black"     # Point color
) +
# Add mean points
stat_summary(
fun = "mean",       # Use the mean for each group
geom = "point",     # Plot points
shape = 23,         # Change shape of the point (filled point)
size = 3,           # Size of the point
color = "black",    # Point outline color
fill = "white",     # Point fill color
position = position_dodge(0.9)  # Align mean points with violins
) +
# Axis labels
labs(x = "Fishing Experience",
y = "CPUE in 30 min") +
# Customize theme for publication
theme_bw(base_size = 14) +  # Increase base font size for clarity
# Customize axis text and titles
theme(
axis.title = element_text(face = "bold", size = 12),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10)),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12, face = "bold"),  # Facet labels
legend.position = "none",
panel.spacing = unit(3, "lines"),  # Add spacing between facets
plot.margin = margin(1, 1, 1, 1, "cm")  # Increase margin around the plot
) +
# Facet wrap for Year and Species
# facet_wrap(. ~ Year) +
# Manually set fill colors for violins
scale_fill_manual(values = c("grey80", "grey80")) +
# Add cleaner gridlines
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
##sub model for size analysis
Sub_size_model<-lmer(log_Length ~
Fishing_experience_adjusted*Hook_size+
Fishing_experience_adjusted*Session_ID+
Date_ID*Fishing_experience_adjusted+
Hook_size*Date_ID+
Hook_size*Session_ID+
(1|Year)+(1|Angler_ID)+(1|Spot_ID),
data=AnglingClass_size_data)
summary(Sub_size_model)
Anova(Sub_size_model)
#Sub model
Sub_model_bleeding<-glmer(data=AnglingClass_bleeding_data,
Bleeding~Date_ID*Fishing_experience_adjusted+
Session_ID*Fishing_experience_adjusted+
Hook_size*Fishing_experience_adjusted+
Hook_size*Date_ID+
Hook_size*Session_ID+
(1|Year)+(1|Angler_ID)+(1|Spot_ID),
family = binomial(link = "logit"))
summary(Sub_model_bleeding)
Anova(Sub_model_bleeding)
#Sub model
Sub_model_hooking<-glmer(data=AnglingClass_hooking_data,
Hooking_depth~Date_ID*Fishing_experience_adjusted+
Session_ID*Fishing_experience_adjusted+
Hook_size*Fishing_experience_adjusted+
Hook_size*Date_ID+
Hook_size*Session_ID+
(1|Year)+(1|Angler_ID)+(1|Spot_ID),
family = binomial(link = "logit"))
summary(Sub_model_hooking)
Anova(Sub_model_hooking)
#odds_ratio
exp(fixef(Sub_model_hooking))
##read needed packages
pacman::p_load(tidyverse,ggdist,readr,lmerTest,ggplotgui,car,performance,glmmTMB,readxl,scales,vegan, rstatix, ggsci)
#setwd("X:/Biologie der Fische, Fischerei und Aquakultur/Arlinghaus/Sampling_2024/coding")
setwd("C:/Users/rfuta/OneDrive/発表/講義/IGBFishingClass/angling_experiment/")
## Read the data set of individual level
AnglingClass_data <- read_xlsx("AnglingClass_finaldata.xlsx",sheet=1)%>%
mutate(Date=as.Date(Date))%>%
mutate(log_Length=log(Length),
Hooking_depth=case_when(Hooking_depth=="Verydeep"~1,
Hooking_depth=="Deep"~1,
Hooking_depth=="Shallow"~0,
FALSE~NA))%>%
mutate(Bleeding=case_when(Bleeding=="YES"~1,
Bleeding=="NO"~0,
FALSE~NA))
##Negative binomial distribution sub model
Sub_CPUE_model_nb <- glmmTMB(N_fish~
Fishing_experience_adjusted*Hook_size+
(1|Year)+(1|Angler_ID)+(1|Spot_ID)+(1|Session_ID)+(1|Date_ID),
family = nbinom2,
data = Angling_CPUE_data)
summary(Sub_CPUE_model_nb)
Anova(Sub_CPUE_model_nb)
##sub model for size analysis
Sub_size_model<-lmer(log_Length ~
Fishing_experience_adjusted*Hook_size+
(1|Year)+(1|Angler_ID)+(1|Spot_ID)+(1|Session_ID)+(1|Date_ID),
data=AnglingClass_size_data)
summary(Sub_size_model)
Anova(Sub_size_model)
Sub_model_bleeding<-glmer(data=AnglingClass_bleeding_data,
Bleeding~
Hook_size*Fishing_experience_adjusted+
(1|Year)+(1|Angler_ID)+(1|Spot_ID)+(1|Session_ID)+(1|Date_ID),
family = binomial(link = "logit"))
summary(Sub_model_bleeding)
Anova(Sub_model_bleeding)
AnglingClass_hooking_data <-AnglingClass_data%>%
filter(!is.na(Bleeding))%>%
filter(!Date %in%  ymd(c("2020-09-02", "2020-09-03")))
#Sub model
Sub_model_hooking<-glmer(data=AnglingClass_hooking_data,
Hooking_depth~
Hook_size*Fishing_experience_adjusted+
(1|Year)+(1|Angler_ID)+(1|Spot_ID)+(1|Session_ID)+(1|Date_ID),,
family = binomial(link = "logit"))
summary(Sub_model_hooking)
Anova(Sub_model_hooking)
AnglingClass_hooking_data <-AnglingClass_data%>%
filter(!is.na(Bleeding))%>%
filter(!Date %in%  ymd(c("2020-09-02", "2020-09-03")))
#Sub model
Sub_model_hooking<-glmer(data=AnglingClass_hooking_data,
Hooking_depth~
Hook_size*Fishing_experience_adjusted+
(1|Year)+(1|Angler_ID)+(1|Spot_ID)+(1|Session_ID)+(1|Date_ID),,
family = binomial(link = "logit"))
summary(Sub_model_hooking)
Anova(Sub_model_hooking)
#odds_ratio
exp(fixef(Sub_model_hooking))
#odds_ratio
exp(fixef(Sub_model_bleeding))
##species data
chisq.test(table(AnglingClass_data$Bleeding,
AnglingClass_data$Hooking_depth))
# Create a contingency table for Bleeding and Hooking_depth
contingency_table <- table(AnglingClass_data$Bleeding, AnglingClass_data$Hooking_depth)
# Convert the contingency table to a data frame for ggplot
contingency_df <- as.data.frame(contingency_table)
colnames(contingency_df) <- c("Bleeding", "Hooking_depth", "Count")
# Recode 0/1 as No/Yes for Bleeding and Hooking_depth
contingency_df$Bleeding <- factor(contingency_df$Bleeding, levels = c(0, 1), labels = c("No", "Yes"))
contingency_df$Hooking_depth <- factor(contingency_df$Hooking_depth, levels = c(0, 1), labels = c("Shallow", "Deep"))
# Calculate percentage within each Hooking_depth group
contingency_df <- contingency_df %>%
group_by(Hooking_depth) %>%
mutate(Percent = Count / sum(Count) * 100)  # Calculate percentage
# Plot the contingency table using ggplot with percentages
ggplot(contingency_df, aes(x = Hooking_depth, y = Percent, fill = Bleeding)) +
# Create a stacked bar plot
geom_bar(stat = "identity", position = "fill", color = "black", alpha = 0.7) +
# Customize the colors for "Bleeding"
scale_fill_manual(values = c("0" = "white", "1" = "grey30"),
labels = c("No" = "No Bleeding", "Yes" = "Bleeding")) +
# Add labels
labs(x = "Hooking Depth", y = "Percentage", fill = "Bleeding Status") +
# Convert y-axis to percent format
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
# Add percentage labels inside the bars
geom_text(aes(label = paste0(round(Percent, 1), "%")),
position = position_fill(vjust = 0.5),
size = 3) +
# Theme adjustments
theme_classic(base_size = 14) +
# Customize axis labels
theme(
axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(size = 12),
legend.position = "right"
)
